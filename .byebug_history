continue
promotion
continue
promotion
continue
promotion
continue
promotion
current_user_id
continue
promotion
continue
promotion
continue
@promotion.booking_detail
continue
@promotion.booking_detail
@promotion
continue
promotion
continue
param
continue
params
param
byebug
continue
show[:space]
continue
show[:space]
continue
show[:space]
show
continue
promotion
PromotionService.new.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
promotion = promotion.promotion if promotion.is_a?(TempPromotion)
continue
a = Promotion.find 27
a = TempPromotion.find 27
continue
a = TempPromotion.find 27
continue
a = TempPromotion.find 27
a = Promotion.find 27
promotion_id
promotion
continue
promotion
continue
current_user.promotions.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
current_user.promotions
current_user.promotion
current_user
PromotionService.new
PromotionService.new.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
promotion
exit
e.message
exit
continue
e.message
e.messager
promotion
temp_pro
NoMethodError: undefined method `reverse' for nil:NilClass
e.message
puts e.backtrace
exit
e.message
exit
continue
e.message
params
exit
e.message
exit
promotion.street_address_1
e.message
puts e.backtrace
e.backtrace
e.message
exit
puts e.backtrace
e.backtrace.first
e.backtrace
e.message
exit
e.message
temp_pro
promotion.errors.sizetemp_pro
promotion.errors.size
promotion.errors.full_messages
promotion.errors
promotion
promotion.google_map_link.class
e.message
promotion.google_map_link
exit
promotion.google_map_link
continue
promotionss.end_date
promotionss
continue
promotion
continue
promotion
continue
self
continue
promotion
continue
promotion.booking_detail
promotion
continue
promotion
continue
PromotionService.new.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
promotion
continue
number_of_promotion_booked(promotion_id)
show_number_promotion_of_a_active(promotion, start_date, end_date)
continue
show_number_promotion_of_a_active(promotion, start_date, end_date)
number_of_promotion_booked(promotion_id)
continue
Booking.total_booked_promotion(promotion_id).count
promotion_id
promotion
continue
show_number_promotion_of_a_active(promotion.promotion, start_date, end_date)
promotion
show_number_promotion_of_a_active(promotion.temp_promotion, start_date, end_date)
show_number_promotion_of_a_active(promotion, start_date, end_date)
promotion
continue
PromotionService.new.show_space(promotion.promotion, promotion.promotion.start_date, promotion.promotion.end_date, promotion.promotion.id)
PromotionService.new.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
PromotionService.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
t('.25')
promotion
continue
promotion
continue
promotion
continue
promotion
PromotionService.new.show_space(promotion, promotion.start_date, promotion.end_date,promotion.id)
promotion.end_date?
promotion.end_date
promotion
continue
params
promotion
continue
@promotion.cancel_status
@promotion
continue
temp_promotion.promotion.categories
temp_promotion.categories
continue
promotion.booking_detail
promotion
continue
temp_promotion.promotion.booking_detail
temp_promotion.booking_detail
continue
promotion.booking_detail
promotion
promotion.is_a?(TempPromotion)
continue
promotion.temp_promotion.booking_detail
promotion.temp_promotion
promotion.booking_detail
promotion
continue
temp_promotion.clone_attachment(image_temp, new_attachment)
temp_promotion
TempPromotion.clone_attachment(image_temp, new_attachment)
continue
promotion
continue
next
promotion
next
promotion
continue
next
 promotion
continue
Promotion.last
self
continue
self.booking_detail
self
exit
self.temp_promotion
self
continue
TempPromotion.last.booking_detail.booking_criterion
TempPromotion.last.booking_detail
TempPromotion.last
BookingDetail.last
self.booking_detail
self
continue
a.save
a.booking_detailable_id = 35
a = BookingDetail.last
BookingDetail.last
promotion.booking_detail
promotion
continue
self.class.get_current_ranks self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
continue
self.get_current_rank self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
self.class
continue
self.get_current_rank self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
continue
self.class.get_current_rank self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
self.get_current_rank self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
self
self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids]).symbolize_keys
self
continue
self.class.get_current_rank
self.class.get_current_rank self.as_json(only: [:id, :discount_percent, :created_at], methods: [:discount, :category_ids])
self
continue
start_date.strftime("%d-%m-%Y")
start_date
end_date
continue
object
continue
@promotion.cancel_status
continue
promotion = TempPromotion.find_by_id(params[:id])
continue
current_user.temp_promotions.size
current_user.temp_promotions
current_user
continue
current_user.temp_promotion
current_user.temp_promotions
current_user
params
continue
Promotion.find_by_id(params[:id])
params
continue
params[:id]
continue
params[:abc]
